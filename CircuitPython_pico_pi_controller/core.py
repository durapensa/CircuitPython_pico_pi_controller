# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['IDENTITY', 'BUFCLR', 'CLR', 'IDF', 'HOS', 'TIM', 'BOS', 'LOD', 'TZO', 'PEN', 'UNDevice', 'PPDevice',
           'PPController']

# Cell
from sys import byteorder, modules
from time import sleep, localtime
import board
#import busio
from adafruit_bus_device import i2c_device
try:
    from rtc import RTC
except:
    pass
try:
    from adafruit_datetime import datetime
except:
    from datetime import datetime
try:
    from adafruit_itertools.adafruit_itertools import chain
except:
    from itertools import chain

try:
    import adafruit_logging as logging
    logger = logging.getLogger('PPC')
    logger.setLevel(logging.DEBUG)
except:
    import logging
    logger = logging.getLogger()
    logging.basicConfig(level = logging.DEBUG)

IDENTITY = bytearray(([ord(c) for c in list('ppcd')]))
"""identifier string used by RPi devices"""

BUFCLR = 16
"""number of bytes to clear from the sender's TX buffer"""

CLR = bytearray(); CLR.append(ord('C')) # request clear transmit FIFO
IDF = bytearray(); IDF.append(ord('I')) # request to send [str] identification
HOS = bytearray(); HOS.append(ord('H')) # request to send [str] hostname
TIM = bytearray(); TIM.append(ord('T')) # request to send [int] datetime
BOS = bytearray(); BOS.append(ord('B')) # request to send [bool] bosmang status
LOD = bytearray(); LOD.append(ord('L')) # request to send [int] load
TZO = bytearray(); TZO.append(ord('Z')) # request to send [int] timezone (sec offset from UTC)
PEN = bytearray(); PEN.append(ord('P')) # request to send [int] MCU pin connected to RPi PEN

# Cell
class UNDevice():
    """Represents an I2C peripheral device unidentified to a `PPController`"""
    def __init__(self, controller, device_address, *argv, **kwargs):
        self.controller  = controller
        self.device_address = device_address
        self.i2cdevice      = None
        """The I2CDevice created by a PPController."""

        self.retries     = 0
        self.retries_max = 4
        """retry count before I2CDevice is considered 'other', i.e. not a PPC device."""

# Cell
class PPDevice():
    """Represents an I2C peripheral device identified as a `PPDevice`
    and stores data from those hosts."""
    def __init__(self, controller, device_address, *argv, **kwargs):
        self.controller     = controller
        self.device_address = device_address
        self.i2cdevice      = None
        """The I2CDevice created by a PPController."""

        self.retries     = 0
        self.retries_max = 4
        """retry count before I2CDevice is considered 'other', i.e. not a PPC device."""
        self.lastonline  = None
        """controller timestamp updated with each successful receive. reports & bosmang
           can decide what to do with this info."""

        """All data below are received *from* the PPC device:"""

        self.bosmang    = None
        """Declaration that device will send datetime & control instructions to controller.
           Only one bosmang per controller please, unless you wanya chaos."""
        self.UART_RX    = None
        """MCU GPIO RX for passthru from bosmang console TX"""
        self.UART_TX    = None
        """MCU GPIO TX for passthru from bosmang console RX"""
        self.PEN        = None
        """MCU GPIO connected to RPi PEN pin"""

        self.hostname   = None
        self.datetime   = None
        """datetime object converted from timestamp, used to send datetime as bosmang &
           to check for datetime skew on other devices."""
        self.utcoffset  = None
        self.loadavg    = None

        self.IDstr = type(self).__name__[0:3]+": "+str(hex(self.device_address))

    def logTXN(self, fname, message, msg=None):
        logger.info(self.IDstr+" "+
                    "{:<27}".format(message+" "+str(msg or ''))+
                    "{:<13}".format(fname)+
                    self.controller.IDstr)

    def getHostname(self):
        fname='getHostname'
        #self.logTXN(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            msg = bytearray(BUFCLR)
            try:
                i2cdevice.write_then_readinto(CLR,msg)
                """Clear the i2c peripheral's transmit FIFO"""
            except:
                pass
            msg = bytearray(1)
            try:
                i2cdevice.write_then_readinto(HOS,msg)
                """Get the length in bytes of the hostname"""
                msg = bytearray(int.from_bytes(msg, byteorder))
                i2cdevice.readinto(msg)
                self.lastonline=datetime.now()
                self.logTXN(fname,"recvd hostname",msg.decode())
            except:
                pass
        return msg.decode()

    def getDatetime(self):
        fname='getDatetime'
        #self.logTXN(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            msg = bytearray(BUFCLR)
            try:
                i2cdevice.write_then_readinto(CLR,msg)
                """Clear the i2c peripheral's transmit FIFO"""
            except:
                pass
            msg = bytearray(4)
            try:
                i2cdevice.write_then_readinto(TIM,msg)
                self.lastonline=datetime.now()
                self.logTXN(fname,"recvd datetime",int.from_bytes(bytes(msg),byteorder))
                return datetime.fromtimestamp((int.from_bytes(bytes(msg),byteorder)))
            except:
                pass
        return None

    def getBosmang(self):
        fname='getBosmang'
        #self.logTXN(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            msg = bytearray(BUFCLR)
            try:
                i2cdevice.write_then_readinto(CLR,msg)
                """Clear the i2c peripheral's transmit FIFO"""
            except:
                pass
            msg = bytearray(1)
            try:
                i2cdevice.write_then_readinto(BOS,msg)
                self.lastonline=datetime.now()
                self.controller.bosmang = self.device_address
                self.logTXN(fname,"recvd bosmang status:",bool(msg.decode()))
                return bool(int.from_bytes(bytes(msg),byteorder))
            except:
                pass
        return None

    def getTimezone(self):
        fname='getTimezone'
        #self.logTXN(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            msg = bytearray(BUFCLR)
            try:
                i2cdevice.write_then_readinto(CLR,msg)
                """Clear the i2c peripheral's transmit FIFO"""
            except:
                pass
            msg = bytearray(3)
            try:
                i2cdevice.write_then_readinto(TZO,msg)
                self.lastonline=datetime.now()
                self.logTXN(fname,"recvd utcoffset",int.from_bytes(bytes(msg),byteorder))
                return int.from_bytes(bytes(msg),byteorder)
            except:
                pass
        return None

    def getLoadavg(self):
        fname='getloadavg'
        #self.logTXN(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            msg = bytearray(BUFCLR)
            try:
                i2cdevice.write_then_readinto(CLR,msg)
                """Clear the i2c peripheral's transmit FIFO"""
            except:
                pass
            msg = bytearray(4)
            try:
                i2cdevice.write_then_readinto(LOD,msg)
                self.lastonline=datetime.now()
                self.logTXN(fname,"recvd loadavg:",msg.decode())
                return msg.decode()
            except:
                pass
        return None

    def getUART_RX_GPIO(self):
        return self.UART_RX

    def getUART_TX_GPIO(self):
        return self.UART_TX

    def getPEN_GPIO(self):
        return self.PEN

# Cell
class PPController():
    """Represents one of the system's I2C busses and tracks which I2C
    peripherals are `PPDevice`s."""
    def __init__(self, **kwargs):
        self.i2c       = None
        self.scl       = kwargs.pop('scl', board.SDA)
        self.sda       = kwargs.pop('sda', board.SDA)
        self.frequency = kwargs.pop('frequency', 4800)
        self.timeout   = kwargs.pop('timeout', 10000)
        self.bosmang   = kwargs.pop('bosmang', None)
        """PPDevice device_address selected to recieve datetime & control instructions from,
           have UART connected for passthru, etc. Default is `None`."""
        self.datetime  = None
        """to receive datetime from bosmang & to check for datetime skew on other devices."""
        self.utcoffset = None
        self.clock     = RTC()

        self.PPDs      = []
        """PPDevice objects belonging to PPController object."""
        self.noident   = []
        """UNDevice objects belonging to PPController object."""
        self.othrdev   = []
        """UNDevice objects without I2CDevices (address record only)
           recognized as 'other' peripherals"""

        self.IDstr = str(self.scl).strip('board.')+"/"+str(self.sda).strip('board.')

    def logTXN(self, fname, message, hexaddr=None, msg=None):
        logger.info(type(self).__name__[0:3]+": "+
                    str(hexaddr or '    ')+" "
                    "{:<27}".format(message+" "+str(msg or ''))+
                    "{:<13}".format(fname)+
                    self.IDstr)

    def setDatetime(self,timetuple):
        fname='setDatetime'
        self.clock.datetime = timetuple
        self.logTXN(fname,str(datetime.now()))

    def scanForNew(self):
        fname='scanForNew'
        while not self.i2c.try_lock():
            pass
        self.logTXN(fname,">>> SCANNING I2C bus <<<")

        for addr in self.i2c.scan():
            if not any(d.device_address == addr for d in chain(self.PPDs,self.noident,self.othrdev)):
                self.noident.append(UNDevice(controller=self,device_address=addr))
                self.noident[-1].i2cdevice=i2c_device.I2CDevice(self.i2c,device_address=addr,probe=False)
                self.logTXN(fname,"added I2C peripheral",hex(addr))
        self.i2c.unlock()
        return True

    def identifyNew(self):
        fname='identifyNew'
        i = 0
        while i < len(self.noident):
            addr = self.noident[i].device_address
            self.logTXN(fname,"querying I2C peripheral",hex(addr))
            with self.noident[i].i2cdevice as unident:
                msg = bytearray(BUFCLR)
                try:
                    unident.write_then_readinto(CLR,msg)
                    """Clear the i2c peripheral's TX FIFO"""
                except:
                    pass
                msg = bytearray(len(IDENTITY))
                try:
                    unident.write_then_readinto(IDF,msg)
                except:
                    self.logTXN(fname,"WRITE FAILED",hex(addr))
                    pass
                if msg == IDENTITY:
                    self.PPDs.append(PPDevice(controller=self,device_address=addr))
                    self.PPDs[-1].i2cdevice = unident
                    self.PPDs[-1].lastonline=datetime.now()
                    del self.noident[i]
                    self.logTXN(fname,">>>  added PPDevice <<<",hex(addr))
                else:
                    self.noident[i].retries += 1
                    self.logTXN(fname,"ID FAILED on try",hex(addr),self.noident[i].retries)
                    if self.noident[i].retries >= self.noident[i].retries_max:
                        self.logTXN(fname,"max retries; releasing",hex(addr))
                        self.othrdev.append(self.noident.pop(i))
                        del self.othrdev[-1].i2cdevice
                    else:
                        i += 1

    def addDevices(self):
        fname='addDevices'
        self.logTXN(fname,'    function called')
        self.scanForNew()
        if self.noident:
            self.logTXN(fname,"found new peripherals:",'',len(self.noident))
            self.identifyNew()

    def queryAll(self):
        fname='queryAll'
        self.logTXN(fname,'    function called')
        for ppd in self.PPDs:
            ppd.datetime  = ppd.getDatetime()
            ppd.utcoffset = ppd.getTimezone()
            ppd.bosmang   = ppd.getBosmang()
            if ppd.bosmang:
                self.setDatetime(ppd.datetime.timetuple())
            ppd.hostname  = ppd.getHostname()
            ppd.loadavg   = ppd.getLoadavg()
            ppd.UART_RX   = ppd.getUART_RX_GPIO()
            ppd.UART_TX   = ppd.getUART_TX_GPIO()
            ppd.PEN       = ppd.getPEN_GPIO()

    def getTime(self):
        return localtime()

    def getPPD(self,**kwargs):
        device_address = kwargs.pop('device_address', None)
        if device_address:
            dl = list(filter(lambda d: d.device_address == device_address, self.PPDs))
            if dl:
                return dl[0]
        hostname = kwargs.pop('hostname', None)
        if hostname:
            dl = list(filter(lambda d: d.hostname == hostname, self.PPDs))
            if dl:
                return dl[0]
        return None