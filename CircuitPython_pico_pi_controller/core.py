# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['polling_interval', 'poll_fail_max', 'IDENTITY', 'IDF', 'HOS', 'LOD', 'TIM', 'PPDevice', 'PPController']

# Cell
from sys import byteorder, modules
#from rtc import RTC #can't do without MCU CircuitPython
#from time import sleep, datetime, struct_time
from time import sleep
from board import SCL,SDA
from busio import I2C
from adafruit_bus_device.i2c_device import I2CDevice
#from adafruit_itertools.adafruit_itertools import chain
from itertools import chain

# Cell
polling_interval = 2
poll_fail_max = 11
IDENTITY = bytearray('ppc-daemon','utf-8') # of RPi devices

# Cell
IDF = bytearray('I','utf-8') # request to send identification
HOS = bytearray('H','utf-8') # request to send hostname
LOD = bytearray('L','utf-8') # request to send load
TIM = bytearray('T','utf-8') # request to send datetime

# Cell
class PPDevice(I2CDevice):
    """Represents an I2C peripheral device known to a `PPController`
    and stores data from those peripherals identified as PPC devices."""
    def __init__(self, i2c, device_address, **kwargs):
        super().__init__(i2c,device_address,**kwargs)
        #self.device_address = device_address
        self.hostname = "unknown"
        self.load = ""
        self.retries = 0

    def getHostname(self):
        return self.hostname

# Cell
class PPController(I2C):
    """Represents one of the system's I2C busses and tracks which I2C
    peripherals are `PPDevice`s."""
    def __init__(self, scl=SCL, sda=SDA, frequency=4800, bosmang=None, UART_RX=None, UART_TX=None):
        super().__init__(scl, sda, frequency)
        self.bosmang = bosmang
        """PPDevice hostname selected to recieve datetime from, send control instructions,
        have UART connected, etc."""
        self.UART_RX = UART_RX
        """board pin RX for passthru from bosmang"""
        self.UART_TX = UART_TX
        """board pin TX for passthru from bosmang"""

        self.devices = []
        self.noident = []
        self.othrdev = []

        self.datetime = 0

    def addDevice(self, *args):
        self.devices.append(PPDevice(i2c=self,device_address=args[0]))


    def scanForNew(self):
        for addr in self.scan():
            if not any(d.device_address == addr
                       for d in chain(self.devices,self.noident,self.othrdev)):
                self.noident.append(PPDevice(i2c=self,device_address=addr))

    def identifyNew(self):
        for d in self.noident:
            with d:
                msg = bytearray(len(IDENTITY))
                try:
                    d.write_then_readinto(IDF,msg)
                except:
                    pass
            if msg == IDENTITY:
                self.devices.append(self.noident.pop(d.index()))
            else:
                d.retries += 1
                if d.retries >= poll_fail_max:
                    self.othrdev.append(self.noident.pop(d.index()))


    def autoAddDevices(self):
        scanForNew()
        identifyNew()

    def listdevices(self):
        return self.devices