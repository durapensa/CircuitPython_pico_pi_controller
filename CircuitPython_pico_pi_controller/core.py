# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['UNDevice', 'PPDevice', 'PPController']

# Cell

from CircuitPython_pico_pi_common.codes import *
import board, microcontroller, binascii
from sys import byteorder
from busio import I2C
from adafruit_bus_device.i2c_device import I2CDevice
try:
    from rtc import RTC
except ModuleNotFoundError:
    pass
try:
    from adafruit_datetime import datetime
except ModuleNotFoundError:
    from datetime import datetime
try:
    from adafruit_itertools.adafruit_itertools import chain
except ModuleNotFoundError:
    from itertools import chain

try:
    import adafruit_logging as logging
    logger = logging.getLogger('PPC')
    logger.setLevel(logging.DEBUG)
    # Monkey patch the logger's timestamp
    def format(self, level, msg):
        return "{0}: {1} - {2}".format(datetime.now().isoformat(), logging.level_for(level), msg)
    logging.LoggingHandler.format = format
except ModuleNotFoundError:
    import logging
    logger = logging.getLogger()
    logging.basicConfig(level = logging.DEBUG)

# Cell

class UNDevice():
    """Represents an I2C peripheral device unidentified to a `PPController`"""
    def __init__(self, controller, device_address):
        self.controller  = controller
        """type: PPController Creator/owner of the UNDevice instance."""
        self.i2cdevice      = None
        """type: I2CDevice Created by a PPController."""
        self.device_address = device_address
        """type: int The I2C address of the UNDevice"""

        self.retries     = 0
        self.retries_max = 4
        """retry count before I2CDevice is considered 'other', i.e. not a PPC device."""

class PPDevice():
    """Represents an I2C peripheral device identified as a `PPDevice`
    and stores data from those hosts."""
    def __init__(self, controller, device_address):
        self.controller     = controller
        """type: PPController Creator/owner of the PPDevice instance."""
        self.i2cdevice      = None
        """type: I2CDevice Created by a PPController."""
        self.device_address = device_address
        """type: int The I2C address of the PPDevice"""

        self.lastonline  = None
        """type: int A controller timestamp updated with each successful receive.
           reports & bosmang can decide what to do with this info."""

        """All data below are received via I2C *from* the PPC device:"""

        self.bosmang    = None
        """type: bool Declaration that device can send datetime & commands to controller.
           Only one bosmang per controller please, unless you wanya chaos."""
        self.command    = None
        """type: bytes Ref: CMD_CODES The latest command received from a PPC device."""
        self.cmd_from   = None
        """type: int device_address of the PPD that sent the command or 0x00 for ppdd."""

        self.hostname   = None
        """type: str"""
        self.timestamp   = None
        """type: int Used to send datetime as bosmang &  to check for datetime skew on other devices."""
        self.utcoffset  = None
        """type: int"""
        self.loadavg    = None
        """type: str"""
        self.uptime     = None
        """type: int"""

        self.uart_rx    = None
        """type: int MCU gpio rx for passthru from bosmang console TX"""
        self.uart_tx    = None
        """type: int MCU gpio tx for passthru from bosmang console RX"""
        self.pen        = None
        """type: int MCU gpio connected to RPi pen pin"""

        self.id_str = type(self).__name__[2]+" "+str(hex(self.device_address))

    def log_txn(self, fname, message, msg=None):
        """Wrapper for logger."""
        logger.info('%-6s %-27s %-9s %s' % (self.id_str, message+str(msg or ''), fname, self.controller.i2c_str))

    @staticmethod
    def conv_sec(seconds):
        """Convert seconds into a tuple: days, hours, minutes, seconds"""
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        days, hours = divmod(hours, 24)
        return days, hours, minutes, seconds

    @staticmethod
    def clr_fifo(i2cdevice):
        """Clear the i2c peripheral's transmit FIFO"""
        msg = bytearray(REG_VAL_LEN['CLR'])
        try:
            i2cdevice.write_then_readinto(REG_CODE['CLR'],msg)
        except OSError:
            pass

    def get_hos(self):
        """Ask PPD for its hostname"""
        fname='get_hos'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = bytearray(REG_VAL_LEN['HOS'])
            try:
                i2cdevice.write_then_readinto(REG_CODE['HOS'],msg)
                """Get the length in bytes of the hostname"""
                msg = bytearray(int.from_bytes(msg, byteorder))
                i2cdevice.readinto(msg)
                if len(msg.decode()) > 12:
                    self.log_txn(fname,"error I2C TX/RX")
                    return None
                self.lastonline=int(datetime.now().timestamp())
                self.log_txn(fname,"recvd hostname ",msg.decode())
                return msg.decode()
            except OSError:
                pass
        return None

    def get_tim(self):
        """Ask PPD for its datetime in seconds since epoch, returns timestamp int"""
        fname='get_tim'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = bytearray(REG_VAL_LEN['TIM'])
            try:
                i2cdevice.write_then_readinto(REG_CODE['TIM'],msg)
                self.lastonline=int(datetime.now().timestamp())
                self.log_txn(fname,"recvd timestamp: ",int.from_bytes(bytes(msg),byteorder))
                return int.from_bytes(bytes(msg),byteorder)
            except OSError:
                pass
        return None

    def get_bos(self):
        """Ask PPD for its bosmang status (bool)"""
        fname='get_bos'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = bytearray(REG_VAL_LEN['BOS'])
            try:
                i2cdevice.write_then_readinto(REG_CODE['BOS'],msg)
                self.lastonline=int(datetime.now().timestamp())
                self.log_txn(fname,"recvd bosmang status: ", str(bool(int.from_bytes(bytes(msg), byteorder))))
                return bool(int.from_bytes(bytes(msg), byteorder))
            except OSError:
                pass
        return None

    def get_tzn(self):
        """Ask PPD for its timezone (in seconds offset from utc)"""
        fname='get_tzn'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = bytearray(REG_VAL_LEN['TZN'])
            try:
                i2cdevice.write_then_readinto(REG_CODE['TZN'],msg)
                self.lastonline=int(datetime.now().timestamp())
                self.log_txn(fname,"recvd utcoffset: ",int.from_bytes(bytes(msg),byteorder))
                return int.from_bytes(bytes(msg),byteorder)
            except OSError:
                pass
        return None

    def get_lod(self):
        """Ask PPD for its load average"""
        fname='get_lod'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = bytearray(REG_VAL_LEN['LOD'])
            try:
                i2cdevice.write_then_readinto(REG_CODE['LOD'],msg)
                self.lastonline=int(datetime.now().timestamp())
                try:
                    self.log_txn(fname,"recvd loadavg: ","{:04.2f}".format(float(msg.decode())))
                except ValueError:
                    self.log_txn(fname,"error I2C TX/RX")
                    return None
                return msg.decode()
            except OSError:
                pass
        return None

    def get_upt(self):
        """Ask PPD for its uptime in seconds"""
        fname='get_upt'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = bytearray(1)
            try:
                i2cdevice.write_then_readinto(REG_CODE['UPT'],msg)
                """Read one byte so we can pause for PPD to get uptime"""
                msg = bytearray(REG_VAL_LEN['UPT'])
                i2cdevice.readinto(msg)
                self.lastonline=int(datetime.now().timestamp())
                self.log_txn(fname,"recvd uptime: ",int.from_bytes(bytes(msg),byteorder))
                self.log_txn(fname,"      uptime: %d d %02d:%02d" % self.conv_sec(int.from_bytes(bytes(msg),byteorder))[:3])
                return int.from_bytes(bytes(msg),byteorder)
            except OSError:
                pass
        return None

    def get_urx(self):
        """Ask PPD for the MCU board pin where its UART RX is connected"""
        return self.uart_rx

    def get_utx(self):
        """Ask PPD for the MCU board pin where its UART TX is connected"""
        return self.uart_tx

    def get_pen(self):
        """Ask PPD for the MCU board pin where its PEN is connected"""
        return self.pen

    def get_cmd(self):
        """Ask PPD for a command (if any)"""
        fname='get_cmd'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            cmd = bytearray(REG_VAL_LEN['CMD'])
            try:
                i2cdevice.write_then_readinto(REG_CODE['CMD'],cmd)
                """Get the command code or 0 for no command"""
                #self.log_txn(fname,"recvd: ",cmd)
                cmd_code = cmd[0]
                if cmd_code not in CMD_NAME:
                    self.log_txn(fname,"recvd invalid command: ",cmd_code)
                    return None
                if cmd_code:
                    #self.log_txn(fname,"recvd: ",cmd_code)
                    remaindr= bytearray(CMD_ARG_LEN[cmd_code]+8) #CMD_ARG_LEN includes device_address
                                                                 #cmd_uid is 8 bytes
                    i2cdevice.readinto(remaindr)
                    command = cmd+remaindr
                    cmd_code, i2c_addr, cmdargs, cmd_uid, valid_status = parse_cmd(command)

                    self.log_txn(fname,"RECVD ",CMD_NAME[cmd_code]+' '+str(hex(i2c_addr))+' '+str(len(cmdargs))+':0x'+binascii.hexlify(cmdargs).decode())
                    self.log_txn(fname,"      ",str(hex(int.from_bytes(cmd_uid, byteorder)))[2:])

                    self.lastonline=int(datetime.now().timestamp())
                    return command
                else:
                    self.lastonline=int(datetime.now().timestamp())
                    return None
            except OSError:
                pass
        return None

    def set_cfm(self, command, target_i2c_addr):
        """Tell a PPD that an activity related to a command it sent is confirmed
           as having been acted upon. cmd_code & i2c_addr are both ints."""
        fname='set_cfm'
        cmd_code, i2c_addr, cmdargs, cmd_uid, valid_status = parse_cmd(command)
        if valid_status:
            with self.i2cdevice as i2cdevice:
                self.clr_fifo(i2cdevice)
                # pokes CFM register with: i2c_addr, whole command incl. uid
                msg = REG_CODE['CFM'] + target_i2c_addr.to_bytes(1,byteorder) + command
                try:
                    i2cdevice.write(msg)
                    self.log_txn(fname," CFMD ",CMD_NAME[cmd_code]+' '+str(hex(target_i2c_addr))+' '+str(len(cmdargs))+':0x'+binascii.hexlify(cmdargs).decode())
                    self.log_txn(fname,"      ",str(hex(int.from_bytes(cmd_uid, byteorder)))[2:])
                    return True
                except OSError:
                    return False
            return False

    def set_flk(self, duration):
        """Tell PPD to flicker its power LED for duration (seconds)"""
        fname='set_flk'
        #self.log_txn(fname,"querying device")
        with self.i2cdevice as i2cdevice:
            self.clr_fifo(i2cdevice)
            msg = REG_CODE['FLK'] + bytearray([duration])
            try:
                i2cdevice.write(msg)
                self.log_txn(fname,' sent flicker '+str(duration)+' second%s' %('s' if duration > 1 else ''))
                return True
            except OSError:
                return False
        return False

class PPController():
    """Represents one of the system's I2C busses and tracks which I2C
       peripherals are `PPDevice`s."""
    def __init__(self, **kwargs):
        fname='__init__'
        self.scl       = kwargs.pop('scl', board.SCL)
        self.sda       = kwargs.pop('sda', board.SDA)
        self.frequency = kwargs.pop('frequency', 4800)
        self.timeout   = kwargs.pop('timeout', 10000)

        self.i2c       = I2C(scl=self.scl, sda=self.sda, frequency=self.frequency, timeout=self.timeout)

        self.bosmang   = kwargs.pop('bosmang', None)
        """type: int PPDevice device_address selected to recieve datetime & control
           instructions from, have UART connected for passthru, etc. If set, bosmang
           will be the first PPDevice contacted & MCU RTC will be set at the earliest
           possible time."""
        self.save   = kwargs.pop('save', None)
        """type: bool. Used to persist PPDevice values to the MCU's flash storage, and
           to inform PPControler to attempt a recovery of data from flash. Optional
           because it uses more memory (loads modules persist, json)."""
        if kwargs:
            raise TypeError('Unepxected kwargs provided: %s' % list(kwargs.keys()))

        self.utcoffset = None
        self.clock     = RTC()

        self.ppds      = []
        """PPDevice objects belonging to a PPController object."""
        self.noident   = []
        """UNDevice objects belonging to a PPController object."""
        self.othrdev   = []
        """UNDevice objects without I2CDevices (address record only)
           recognized as 'other' peripherals"""

        #TBD: impliment UID if system is not an MCU
        self.mcu_uid = '0x'+''.join(map(str, ['{:0>{w}}'.format( hex(x)[2:], w=2 ) for x in microcontroller.cpu.uid])) or None
        self.i2c_str = str(self.scl).strip('board.')+"/"+str(self.sda).strip('board.')

        self.log_txn(fname,"MCU UID: "+str(self.mcu_uid))
        self.log_txn(fname,"I2C freq/timeout "+str(self.frequency)+"/"+str(self.timeout))

        self.bosmang_lok = None
        if self.bosmang:
            self.add_ppd(self.bosmang)
            self.ppds[0].bosmang = True
            self.bosmang_lok = True
            self.log_txn(fname,'      BOSMANG set, locked',hex(self.bosmang))
            self.qry_ppds()

        if self.save:
            self.log_txn(fname,"Loading PPDevices from flash.")
            PPController.ext_prst()
            id_str = type(self).__name__[2]
            self.show_free(logger,id_str,self.i2c_str)
            #self.lod_ppds()

    @classmethod
    def ext_prst(cls):
        """We're treating all the imported methods as static methods."""
        #cls.persist = __import__('CircuitPython_pico_pi_controller.persist').persist
        cls.show_free = __import__('CircuitPython_pico_pi_controller.persist').persist.show_free
        cls.wrt_ppds  = __import__('CircuitPython_pico_pi_controller.persist').persist.wrt_ppds

    def sav_ppds(self):
        """Writes a JSON file with PPD information. Will finish after installing
           a physical read/write switch."""
        serial_ppds = {}
        for ppd in self.ppds:
            serial_ppds[hex(  ppd.device_address)] = {
                'hostname':   ppd.hostname,
                'bosmang':    ppd.bosmang,
                'lastonline': ppd.lastonline,
                'uptime':     ppd.uptime,
                'timestamp':  ppd.timestamp,
                'utcoffset':  ppd.utcoffset
            }
        self.wrt_ppds(serial_ppds)

    def log_txn(self, fname, message, hexaddr=None, msg=None):
        """Wrapper for logger."""
        id_str = type(self).__name__[2]+" "+str(hexaddr or '    ')
        logger.info('%-6s %-27s %-9s %s' % (id_str, message+str(msg or ''), fname, self.i2c_str))

    def add_ppd(self,device_address):
        self.ppds.append(PPDevice(controller=self,device_address=device_address))
        self.ppds[0].i2cdevice=I2CDevice(self.i2c,device_address=device_address,probe=False)

    def set_rtc(self,timestamp):
        """Set the MCU's realtime clock."""
        fname='set_rtc'
        self.clock.datetime = datetime.fromtimestamp(timestamp).timetuple()
        self.log_txn(fname,"      "+str(datetime.now()))

    def i2c_scan(self):
        """Scans the I2C bus and creates I2CDevice objects for each I2C peripheral."""
        fname='i2c_scan'
        while not self.i2c.try_lock():
            pass
        self.log_txn(fname,"      I2C SCANNING bus")

        for addr in self.i2c.scan():
            if not any(d.device_address == addr for d in chain(self.ppds,self.noident,self.othrdev)):
                self.noident.append(UNDevice(controller=self,device_address=addr))
                self.noident[-1].i2cdevice=I2CDevice(self.i2c,device_address=addr,probe=False)
                self.log_txn(fname,"added I2C peripheral",hex(addr))
        self.i2c.unlock()
        return True

    def idf_ppds(self):
        """Identifies PPDs from among all unidentified I2C peripherals.
        I2CDevice objects for non-PPD I2C peripherals are eventually discared."""
        fname='idf_ppds'
        index = 0
        while index < len(self.noident):
            addr = self.noident[index].device_address
            msg = bytearray(REG_VAL_LEN['CLR'])
            self.log_txn(fname,"probn I2C peripheral",hex(addr))
            with self.noident[index].i2cdevice as i2cd_unident:
                try:
                    i2cd_unident.write_then_readinto(REG_CODE['CLR'],msg)
                    """Clear the i2c peripheral's TX FIFO"""
                except OSError:
                    pass
                msg = bytearray(len(ID_CODE))
                try:
                    i2cd_unident.write_then_readinto(REG_CODE['IDF']+binascii.unhexlify(self.mcu_uid[2:]),msg)
                except OSError:
                    self.log_txn(fname,"WRITE FAILED",hex(addr))
                if msg == ID_CODE:
                    self.ppds.append(PPDevice(controller=self,device_address=addr))
                    self.ppds[-1].i2cdevice = i2cd_unident
                    self.ppds[-1].lastonline=int(datetime.now().timestamp())
                    del self.noident[index]
                    self.log_txn(fname,"      ADDED PPDevice",hex(addr))
                else:
                    self.noident[index].retries += 1
                    self.log_txn(fname,"      ID FAILED on try ",hex(addr),self.noident[index].retries)
                    if self.noident[index].retries >= self.noident[index].retries_max:
                        self.log_txn(fname,"max retries; releasing",hex(addr))
                        self.othrdev.append(self.noident.pop(index))
                        del self.othrdev[-1].i2cdevice
                    else:
                        index += 1
            if msg == ID_CODE:
                self.qry_ppds([self.ppds[-1]])

    def add_ppds(self):
        """This class is a wrapper for `i2c_scan` + `idf_ppds`."""
        fname='add_ppds'
        self.log_txn(fname,'      ADDING PPDevices')
        self.i2c_scan()
        if self.noident:
            self.log_txn(fname,"found I2C peripherals: ",'',len(self.noident))
            self.idf_ppds()

    def qry_ppds(self,ppds=None):
        """Queries PPDs for their essential metadata & stats; queries all by default.
           Updates bosmang status if setting not locked on controller.
           Note that certain PPD metadata, once set, can be changed only via command."""
        fname='qry_ppds'
        #self.log_txn(fname,'      function called')
        for ppd in ppds or self.ppds:
            #self.log_txn(fname,'current bosmang: ',None,hex(self.bosmang) if self.bosmang is not None else 'None')
            if not self.bosmang_lok:
                bosmang = None
                while type(bosmang).__name__ != 'bool':
                    bosmang   = ppd.get_bos()
                    if type(bosmang).__name__ == 'bool':
                        ppd.bosmang = bosmang
            timestamp = None
            while not timestamp:
                timestamp = ppd.get_tim()
                if timestamp:
                    ppd.timestamp = timestamp
            if ppd.bosmang and ppd.timestamp:
                self.set_rtc(ppd.timestamp)
                if not self.bosmang:
                    self.bosmang  = ppd.device_address
                    self.log_txn(fname,'>>>>> BOSMANG assigned',hex(self.bosmang))
                elif self.bosmang != ppd.device_address:
                    self.bosmang  = ppd.device_address
                    self.log_txn(fname,'>>>>> BOSMANG changed!',hex(self.bosmang))
            if not ppd.uart_rx:
                ppd.uart_rx   = ppd.get_urx()
            if not ppd.uart_tx:
                ppd.uart_tx   = ppd.get_utx()
            if not ppd.pen:
                ppd.PEN       = ppd.get_pen()
            if not ppd.hostname:
                hostname = None
                while not hostname:
                    hostname = ppd.get_hos()
                    if hostname:
                        ppd.hostname = hostname
            if not ppd.utcoffset:
                utcoffset = None
                while not utcoffset:
                    utcoffset = ppd.get_tzn()
                    if utcoffset:
                        ppd.utcoffset = utcoffset
            loadavg = None
            while not loadavg:
                loadavg       = ppd.get_lod()
                if loadavg:
                    ppd.loadavg = loadavg
            uptime = None
            while not uptime:
                uptime        = ppd.get_upt()
                if uptime:
                    ppd.uptime = uptime

    def get_ppd(self, device_address=None, hostname=None):
        """Get a PPDevice object by device_address or hostname."""
        if device_address:
            dlist = list(filter(lambda d: d.device_address == device_address, self.ppds))
            if dlist:
                return dlist[0]
        if hostname:
            dlist = list(filter(lambda d: d.hostname == hostname, self.ppds))
            if dlist:
                return dlist[0]
        return None

    def png_ppds(self,  ppds=[] , register_names=None):
        """Pings PPDs for queued commands, register values; pings all PPDs by default,
           or a list of ppds, in both cases starting with bosmang."""
        fname='png_ppds'
        if self.bosmang and self.ppds:
            if self.ppds[0] != self.get_ppd(device_address=self.bosmang):
                self.ppds.insert(0, self.ppds.pop(self.ppds.index(self.get_ppd(device_address=self.bosmang))))

        if self.bosmang and not self.get_ppd(device_address=self.bosmang) in ppds:
            ppds = [self.get_ppd(device_address=self.bosmang)] + ppds

        #self.log_txn(fname,'>>> Pinging PPDevices <<<')
        #self.log_txn(fname,ppds[1:])
        for ppd in ppds[1:] or self.ppds:
            #self.log_txn(fname,"get_cmd",hex(ppd.device_address))
            ppd.command   = ppd.get_cmd()
            if isinstance(ppd.command, bytearray):
                self.cmd_hndlr(ppd)

    def cmd_hndlr(self, ppd):
        """Handle a command sent by a PPDevice."""
        fname='cmd_hndlr'
        if ppd.command[0] in CMD_INT:
            cmd_code = ppd.command[0]
            cmd_args = [arg for arg in ppd.command[2:CMD_ARG_LEN[cmd_code]+1]]
            cmd_uid = ppd.command[CMD_ARG_LEN[cmd_code]+1:]
            target_ppds = []
            if cmd_code < 0xFF:
                target_ppds = [self.get_ppd(device_address=ppd.command[1])]
            else:
                target_ppds = [self.get_ppd(device_address=d.device_address) for d in self.ppds]

            for target_ppd in target_ppds:
                if cmd_code in COMPLEX_CMD:
                    if CMD_NAME[cmd_code] == 'REG_GET':
                        getattr(target_ppd,'get_'+REG_NAME[ppd.command[3]].lower())
                        # need REG_ATR_MAP for self.getattr(ppd.REG_ATR_MAP[ppd.command[1]].lower)
                        # so that the returned value can be set at ppd.value (as in qry_ppds)
                        # so need to expand CMD_CATALOG & update dict generators
                    else: #elif
                        pass # complex commands ROUNDROBIN, REPORT
                else:
                    # the simplest case:
                    #self.log_txn(fname,CMD_NAME[cmd_code]+str(cmd_args),hex(target_ppd.device_address))
                    if getattr(target_ppd,'set_'+CMD_REG_MAP[cmd_code].lower())( *cmd_args):
                        if ppd.set_cfm(ppd.command, target_ppd.device_address):
                            ppd.command = None
                        #self.log_txn(fname,CMD_NAME[cmd_code],hex(target_ppd.device_address))
        else:
            self.log_txn(fname,"recvd invalid cmd code: ",ppd.command[0])
            return False
        return True